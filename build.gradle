buildscript {
    ext.kotlin_version = '1.5.31'

    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.jetbrains.kotlin.plugin.spring' version "$kotlin_version"
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id "com.github.node-gradle.node" version "3.0.1"
    id "com.github.ben-manes.versions" version "0.38.0"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'

group = "org.koil"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    testRuntimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("org.springframework.data:spring-data-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation("io.micrometer:micrometer-core")
    implementation("io.micrometer:micrometer-registry-prometheus")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.flywaydb:flyway-core")
    implementation("io.pebbletemplates:pebble-spring-boot-starter:3.1.4")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.9'
    implementation("com.squareup.okhttp3:okhttp:4.8.1")
    implementation("org.imgscalr:imgscalr-lib:4.2")

    implementation('io.sentry:sentry-spring-boot-starter:5.2.1')
    implementation('org.jsoup:jsoup:1.14.3')
    implementation('dev.forkhandles:result4k:1.11.2.0')

    implementation("org.springframework.session:spring-session-jdbc")

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    developmentOnly("io.github.kilmajster:ngrok-spring-boot-starter:0.1")

    runtimeOnly("org.postgresql:postgresql")
    implementation(platform("org.testcontainers:testcontainers-bom:1.15.2"))
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation('com.willowtreeapps.assertk:assertk-jvm:0.25')
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.apache.commons:commons-lang3:3.12.0")
    testImplementation 'net.java.dev.jna:jna:5.7.0' // Required for testcontainers to function on m1 mac
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
        sourceCompatibility = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
        sourceCompatibility = "11"
    }
}

sourceSets {
    webapp {
        // We add this so that our editor knows how to autocomplete our model hints
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/webapp'
        }
    }
}

def buildAssetsDir = "${project.buildDir}/webapp"

task copyAssets(type: Copy) {
    from("$projectDir/src/webapp") {
        exclude "node_modules"
        exclude "dist"
        exclude ".temp_cache"
    }

    into buildAssetsDir

    // Try to preserve timestamps:
    def copyDetails = []
    eachFile { copyDetails << it }
    doLast {
        copyDetails.each { FileCopyDetails details ->
            def target = new File(destinationDir, details.path)
            if (target.exists()) {
                target.setLastModified(details.lastModified)
            }
        }
    }
}

node {
    download = true
    version = "16.9.0" // If you'd like to be on LTS then it'll break the download for M1 macs.
    nodeModulesDir = file(buildAssetsDir)
    npmInstallCommand = 'ci'
}

npm_install.dependsOn copyAssets
npmInstall.dependsOn copyAssets

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(buildProdAssets)) {
        buildAssets.enabled = false
    }
}

task buildAssets(type: NpmTask) {
    dependsOn npmInstall
    dependsOn copyAssets
    // Run the dev build for front-end assets
    args = ['run', 'dev']

    inputs.files(fileTree("$buildAssetsDir/js"))
    inputs.files(fileTree("$buildAssetsDir/css"))
    inputs.file("$buildAssetsDir/postcss.config.js")
    inputs.file("$buildAssetsDir/webpack.mix.js")
    inputs.file("$buildAssetsDir/package.json")
    inputs.file("$buildAssetsDir/package-lock.json")

    outputs.dir("$buildAssetsDir/dist")
}

task bundleAssets(type: Copy) {
    dependsOn buildAssets
    dependsOn processTestResources
    from file("$buildAssetsDir/dist")
    into file("$buildDir/resources/main/static/assets")
}

compileKotlin.dependsOn bundleAssets

task buildProdAssets(type: NpmTask) {
    dependsOn bundleAssets
    // Run the production build for front-end assets
    args = ['run', 'prod']

    inputs.files(fileTree("$buildAssetsDir/js"))
    inputs.files(fileTree("$buildAssetsDir/css"))
    inputs.file("$buildAssetsDir/postcss.config.js")
    inputs.file("$buildAssetsDir/webpack.mix.js")
    inputs.file("$buildAssetsDir/package.json")
    inputs.file("$buildAssetsDir/package-lock.json")

    outputs.dir("$buildAssetsDir/dist")
}

task bundleProdAssets(type: Copy) {
    dependsOn buildProdAssets
    dependsOn compileTestKotlin
    from file("${buildAssetsDir}/dist")
    into file("$buildDir/resources/main/static/assets")
}

test.dependsOn(bundleProdAssets)
bootJarMainClassName.dependsOn(bundleProdAssets)
bootJar.dependsOn(bundleProdAssets)
jar.dependsOn(bundleProdAssets)

jar { // Disable plain jar generation
    enabled = false
}
