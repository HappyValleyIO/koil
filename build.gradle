buildscript {
  ext.kotlin_version = '1.4.10'
  ext.jdbiVersion = "3.16.0"

  repositories {
    maven {
      url = uri("https://plugins.gradle.org/m2/")
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'org.springframework.boot' version '2.4.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.jetbrains.kotlin.plugin.spring' version "$kotlin_version"
  id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
  id "com.github.node-gradle.node" version "2.2.4"
  id "com.gorylenko.gradle-git-properties" version "2.2.2"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'idea'

group = "org.springframework"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11


configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
  testRuntimeClasspath {
    extendsFrom developmentOnly
  }
}

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-starter-jdbc")
  implementation("org.springframework.boot:spring-boot-starter-mail")
  implementation("org.springframework.data:spring-data-jdbc")
  implementation("org.springframework.boot:spring-boot-starter-security")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-validation")

  implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
  implementation("org.flywaydb:flyway-core")
  implementation("io.pebbletemplates:pebble-spring-boot-starter:3.1.4")
  implementation("org.jetbrains.kotlin:kotlin-reflect")
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

  implementation("io.sentry:sentry-spring-boot-starter:3.1.0")
  implementation("org.jsoup:jsoup:1.13.1")

  testImplementation("com.konghq:unirest-java:3.11.01")

  implementation("org.springframework.session:spring-session-jdbc")
  developmentOnly("org.springframework.boot:spring-boot-devtools")
  developmentOnly("io.github.kilmajster:ngrok-spring-boot-starter:0.1")
  runtimeOnly("org.postgresql:postgresql")
  implementation(platform("org.testcontainers:testcontainers-bom:1.14.3"))
  testImplementation("org.testcontainers:postgresql")
  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
  }
  testImplementation("com.willowtreeapps.assertk:assertk-jvm:0.21")
  testImplementation("org.springframework.security:spring-security-test")
}

test {
  useJUnitPlatform()
}

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
    sourceCompatibility = "1.8"
  }
}

compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
    sourceCompatibility = "1.8"
  }
}

sourceSets {
  webapp {
    // We add this so that our editor knows how to autocomplete our model hints
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir 'src/webapp'
    }
  }
}

def buildAssetsDir = "${project.buildDir}/webapp"

task copyAssets(type: Copy) {
  from(buildAssetsDir) {
    exclude "node_modules"
    exclude "dist"
  }

  into buildAssetsDir

  // Try to preserve timestamps:
  def copyDetails = []
  eachFile { copyDetails << it }
  doLast {
    copyDetails.each { FileCopyDetails details ->
      def target = new File(destinationDir, details.path)
      if(target.exists()) { target.setLastModified(details.lastModified) }
    }
  }
}

/**
 * We cache the node installation outside of the build dir. This is so that we don't pull down node + npm whenever we
 * run a `clean`.
 */
def nodeCache = "${projectDir}/.node"

node {
  version = '12.19.0'
  npmVersion = '6.14.8'
  download = true
  workDir = file("$nodeCache/nodejs")
  npmWorkDir = file("$nodeCache/npm")
  nodeModulesDir = file(buildAssetsDir)
  npmInstallCommand = 'ci'
  npmInstall.args = ['--only', 'production']
}
npm_install.dependsOn copyAssets

task buildAssets(type: NpxTask) {
  dependsOn npmInstall
  dependsOn copyAssets
  command = 'snowpack'
  environment = ['NODE_ENV': 'development']
  args = ['build']

  inputs.files(fileTree("$buildAssetsDir/src"))
  inputs.file("$buildAssetsDir/package.json")

  outputs.dir("$buildAssetsDir/dist")
}

task copyBundledTemplates(type: Copy) {
  dependsOn processResources // So that we overwrite the existing
  from "$buildAssetsDir/dist/templates"
  into "$buildDir/resources/main/templates"
}

task bundleAssets(type: Copy) {
  dependsOn buildAssets
  dependsOn copyBundledTemplates
  from file("${buildAssetsDir}/dist")
  into file("$buildDir/resources/main/static")
}

compileKotlin.dependsOn bundleAssets

task buildProdAssets(type: NpxTask) {
  dependsOn bundleAssets
  command = 'parcel'
  args = ['build', './src/**/*.peb', '--cache-dir', "$projectDir/.cache"]

  inputs.files(fileTree("$buildAssetsDir/src"))
  inputs.file("$buildAssetsDir/package.json")

  outputs.dir("$buildAssetsDir/dist")
}

task copyBundledProdTemplates(type: Copy) {
  dependsOn processResources // So that we overwrite the existing
  from "$buildAssetsDir/dist/templates"
  into "$buildDir/resources/main/templates"
}

task bundleProdAssets(type: Copy) {
  dependsOn buildProdAssets
  dependsOn copyBundledProdTemplates
  from file("${buildAssetsDir}/dist")
  into file("$buildDir/resources/main/static")
}

bootJar.dependsOn(bundleProdAssets)
